<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="3.2">
  <classes>
    <class id="MFAUserSettingsTOTP" _created_in="combodo-mfa-totp" _delta="define">
      <properties>
        <category>grant_by_profile</category>
        <abstract>true</abstract>
        <db_table>mfa_user_settings_totp</db_table>
        <style>
          <icon>assets/img/icons8-one-time-password.svg</icon>
        </style>
        <naming>
          <attributes/>
        </naming>
        <reconciliation>
          <attributes>
            <attribute id="user_id"/>
            <attribute id="finalclass"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules/>
      </properties>
      <fields>
        <field id="secret" xsi:type="AttributeEncryptedString">
          <sql>secret</sql>
          <default_value/>
          <is_null_allowed>false</is_null_allowed>
          <validation_pattern/>
          <tracking_level>all</tracking_level>
        </field>
        <field id="code_validity" xsi:type="AttributeDuration">
          <sql>code_validity</sql>
          <default_value>30</default_value>
          <is_null_allowed>false</is_null_allowed>
          <dependencies/>
          <tracking_level>all</tracking_level>
        </field>
        <field id="epoch" xsi:type="AttributeInteger">
          <sql>epoch</sql>
          <default_value>0</default_value>
          <is_null_allowed>false</is_null_allowed>
          <dependencies/>
          <tracking_level>none</tracking_level>
        </field>
      </fields>
      <event_listeners>
        <event_listener id="EVENT_DB_BEFORE_WRITE">
          <event>EVENT_DB_BEFORE_WRITE</event>
          <callback>EvtBeforeWriteMFAUserSettingsTOTP</callback>
          <rank>0</rank>
        </event_listener>
      </event_listeners>
      <methods>
        <method id="EvtSetAttributeFlagsMFAUserSettings">
          <comment>/**
            * Event Listener for EVENT_DB_BEFORE_WRITE
            * An object is about to be written into the database.
            * The object can be modified.
            *
            * @param Combodo\iTop\Service\Events\EventData $oEventData Event data object
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>EventListener</type>
          <code><![CDATA[	public function EvtSetAttributeFlagsMFAUserSettings(Combodo\iTop\Service\Events\EventData $oEventData)
          {
                $this->AddAttributeFlags('code_validity', OPT_ATT_READONLY);
                $this->AddAttributeFlags('epoch', OPT_ATT_READONLY);
                $this->AddAttributeFlags('secret', OPT_ATT_READONLY);
                parent::EvtSetAttributeFlagsMFAUserSettings($oEventData);
          }]]></code>
        </method>
        <method id="EvtBeforeWriteMFAUserSettingsTOTP">
          <comment>/**
            * Event Listener for EVENT_DB_BEFORE_WRITE
            * An object is about to be written into the database.
            * The object can be modified.
            *
            * @param Combodo\iTop\Service\Events\EventData $oEventData Event data object
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>EventListener</type>
          <code><![CDATA[	public function EvtBeforeWriteMFAUserSettingsTOTP(Combodo\iTop\Service\Events\EventData $oEventData)
          {
            if ($oEventData->Get('is_new')) {
                Combodo\iTop\MFATotp\Service\MFATOTPService::GetInstance()->OnBeforeCreate($this);
            }
          }]]></code>
        </method>
        <method id="GetConfigurationURLForMyAccountRedirection">
          <comment>/**
            *
            * @return LoginTwigContext
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function GetConfigurationURLForMyAccountRedirection(): string
          {
            return Combodo\iTop\MFATotp\Service\MFATOTPService::GetInstance()->GetConfigurationURLForMyAccountRedirection($this);
          }]]></code>
        </method>
        <method id="HasToDisplayValidation">
          <comment>/**
            * Indicates if the validation screen has to be displayed or not
            * @return bool
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function HasToDisplayValidation(): bool
          {
            return Combodo\iTop\MFATotp\Service\MFATOTPService::GetInstance()->HasToDisplayValidation($this);
          }]]></code>
        </method>
        <method id="ValidateLogin">
          <comment>/**
            * Indicates if the validation code given by the user is valid or not
            * @return bool
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function ValidateLogin(): bool
          {
            return Combodo\iTop\MFATotp\Service\MFATOTPService::GetInstance()->ValidateLogin($this);
          }]]></code>
        </method>
      </methods>
      <presentation>
        <list>
          <items>
            <item id="finalclass">
              <rank>10</rank>
            </item>
            <item id="validated">
              <rank>30</rank>
            </item>
            <item id="is_default">
              <rank>40</rank>
            </item>
          </items>
        </list>
        <search>
          <items/>
        </search>
        <details>
          <items>
            <item id="user_id">
              <rank>10</rank>
            </item>
            <item id="secret">
              <rank>20</rank>
            </item>
            <item id="code_validity">
              <rank>30</rank>
            </item>
            <item id="validated">
              <rank>40</rank>
            </item>
          </items>
        </details>
      </presentation>
      <parent>MFAUserSettings</parent>
    </class>
    <class id="MFAUserSettingsTOTPApp" _created_in="combodo-mfa-totp" _delta="define">
      <properties>
        <category>grant_by_profile,DeniableMFAMode,SelectableMFAMode</category>
        <abstract>false</abstract>
        <db_table>mfa_user_settings_totp_app</db_table>
        <style>
          <icon>assets/img/icons8-one-time-password.svg</icon>
        </style>
        <naming>
          <attributes>
            <attribute id="user_id_friendlyname"/>
          </attributes>
        </naming>
        <reconciliation>
          <attributes>
            <attribute id="user_id"/>
            <attribute id="finalclass"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules>
          <rule id="mfa_uniqueness">
            <attributes>
              <attribute id="user_id"/>
            </attributes>
            <filter><![CDATA[]]></filter>
            <disabled>false</disabled>
            <is_blocking>true</is_blocking>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields/>
      <methods>
        <method id="GetTwigContextForConfiguration">
          <comment>/**
            *
            * @return LoginTwigContext
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function GetTwigContextForConfiguration(): LoginTwigContext
          {
            return Combodo\iTop\MFATotp\Service\MFATOTPAppService::GetInstance()->GetTwigContextForConfiguration($this);
          }]]></code>
        </method>
        <method id="GetTwigContextForLoginValidation">
          <comment>/**
            *
            * @return LoginTwigContext
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function GetTwigContextForLoginValidation(): LoginTwigContext
          {
            return Combodo\iTop\MFATotp\Service\MFATOTPAppService::GetInstance()->GetTwigContextForLoginValidation($this);
          }]]></code>
        </method>

      </methods>
      <presentation>
        <list>
          <items>
            <item id="finalclass">
              <rank>10</rank>
            </item>
            <item id="validated">
              <rank>30</rank>
            </item>
            <item id="is_default">
              <rank>40</rank>
            </item>
          </items>
        </list>
        <search>
          <items/>
        </search>
        <details>
          <items>
            <item id="user_id">
              <rank>10</rank>
            </item>
            <item id="secret">
              <rank>20</rank>
            </item>
            <item id="code_validity">
              <rank>30</rank>
            </item>
            <item id="validated">
              <rank>40</rank>
            </item>
            <item id="is_default">
              <rank>50</rank>
            </item>
          </items>
        </details>
      </presentation>
      <parent>MFAUserSettingsTOTP</parent>
    </class>
    <class id="MFAUserSettingsTOTPMail" _created_in="combodo-mfa-totp" _delta="define">
      <properties>
        <category>grant_by_profile,DeniableMFAMode,SelectableMFAMode</category>
        <abstract>false</abstract>
        <db_table>mfa_user_settings_totp_mail</db_table>
        <style>
          <icon>assets/img/icons8-mail-password.svg</icon>
        </style>
        <naming>
          <attributes>
            <attribute id="user_id_friendlyname"/>
          </attributes>
        </naming>
        <reconciliation>
          <attributes>
            <attribute id="user_id"/>
            <attribute id="finalclass"/>
          </attributes>
        </reconciliation>
        <uniqueness_rules>
          <rule id="mfa_uniqueness">
            <attributes>
              <attribute id="user_id"/>
            </attributes>
            <filter><![CDATA[]]></filter>
            <disabled>false</disabled>
            <is_blocking>true</is_blocking>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields>
        <field id="email" xsi:type="AttributeEmailAddress">
          <sql>email</sql>
          <default_value/>
          <is_null_allowed>false</is_null_allowed>
        </field>
      </fields>
      <event_listeners>
        <event_listener id="EVENT_DB_BEFORE_WRITE">
          <event>EVENT_DB_BEFORE_WRITE</event>
          <callback>EvtBeforeWriteMFAUserSettingsTOTPMail</callback>
          <rank>0</rank>
        </event_listener>
      </event_listeners>
      <methods>
        <method id="GetTwigContextForConfiguration">
          <comment>/**
            *
            * @return LoginTwigContext
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function GetTwigContextForConfiguration(): LoginTwigContext
          {
            return Combodo\iTop\MFATotp\Service\MFATOTPMailService::GetInstance()->GetTwigContextForConfiguration($this);
          }]]></code>
        </method>
        <method id="GetTwigContextForLoginValidation">
          <comment>/**
            *
            * @return LoginTwigContext
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Custom</type>
          <code><![CDATA[	public function GetTwigContextForLoginValidation(): LoginTwigContext
          {
            return Combodo\iTop\MFATotp\Service\MFATOTPMailService::GetInstance()->GetTwigContextForLoginValidation($this);
          }]]></code>
        </method>
        <method id="EvtBeforeWriteMFAUserSettingsTOTPMail">
          <comment>/**
            * Event Listener for EVENT_DB_BEFORE_WRITE
            * An object is about to be written into the database.
            * The object can be modified.
            *
            * @param Combodo\iTop\Service\Events\EventData $oEventData Event data object
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>EventListener</type>
          <code><![CDATA[	public function EvtBeforeWriteMFAUserSettingsTOTPMail(Combodo\iTop\Service\Events\EventData $oEventData)
          {
            if ($oEventData->Get('is_new')) {
                Combodo\iTop\MFATotp\Service\MFATOTPMailService::GetInstance()->OnBeforeCreate($this);
            } else {
                Combodo\iTop\MFATotp\Service\MFATOTPMailService::GetInstance()->OnBeforeUpdate($this);
            }
          }]]></code>
        </method>
        <method id="PrefillCreationForm">
          <comment>/**
            * Complete a new object with data from context
            *
            * @see https://www.itophub.io/wiki/page?id=latest%3Acustomization%3Aform_prefill wiki tutorial
            *
            * @param array $aContextParam Context used for creation form prefilling. Contains those keys :
            *
            * string 'dest_class'
            * string 'origin' either console or portal
            * DBObject 'source_obj' fixed only when creating an external key object
            */
          </comment>
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[	public function PrefillCreationForm(&$aContextParam)
	{
	    $this->Set('code_validity', 600);
	    parent::PrefillCreationForm($aContextParam);
	}]]></code>
        </method>
      </methods>
      <presentation>
        <list>
          <items>
            <item id="finalclass">
              <rank>10</rank>
            </item>
            <item id="validated">
              <rank>30</rank>
            </item>
            <item id="is_default">
              <rank>40</rank>
            </item>
          </items>
        </list>
        <search>
          <items/>
        </search>
        <details>
          <items>
            <item id="user_id">
              <rank>10</rank>
            </item>
            <item id="email">
              <rank>15</rank>
            </item>
            <item id="validated">
              <rank>20</rank>
            </item>
            <item id="secret">
              <rank>30</rank>
            </item>
            <item id="code_validity">
              <rank>40</rank>
            </item>
            <item id="is_default">
              <rank>60</rank>
            </item>
          </items>
        </details>
      </presentation>
      <parent>MFAUserSettingsTOTP</parent>
    </class>
  </classes>
</itop_design>
